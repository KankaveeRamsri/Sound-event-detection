import streamlit as st
import random
import tensorflow as tf
import numpy as np
import librosa
import io
import joblib


# тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕кр╕╡р╣Гр╕лр╣Йр╕Фр╕╣р╕кр╕зр╕вр╕Вр╕╢р╣Йр╕Щ
page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
    background-color: #0f172a;
}
[data-testid="stSidebar"] {
    background-color: #1e293b;
}
h1 {
    background: -webkit-linear-gradient(45deg, #38bdf8, #a855f7);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

# тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Кр╕╖р╣Ир╕нр╣Бр╕нр╕Ы
st.markdown(
    """
    <h1 style='text-align: center; font-size: 50px;'>
        ЁЯО╡ Sound Event Detection ЁЯО╢
    </h1>
    <p style='text-align: center; font-size: 18px; color: white;'> 
        ЁЯФН р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З р╣Бр╕ер╕░р╣Гр╕лр╣Й AI р╕Чр╕▓р╕вр╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕нр╕░р╣Др╕г!  
    </p>
    """,
    unsafe_allow_html=True,
)

# тЬЕ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕кр╕╡ `st.info()` р╣Гр╕лр╣Йр╕Фр╕╣р╣Ар╕Вр╣Йр╕▓р╕Бр╕▒р╕Ър╕Шр╕╡р╕б
st.markdown(
    "<h3 style='color: white;'>ЁЯОз р╣Ар╕Бр╕ер╣Зр╕Фр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╣Ар╕ер╣Зр╕Бр╕Щр╣Йр╕нр╕вр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Ар╕кр╕╡р╕вр╕З</h3>",
    unsafe_allow_html=True,
)
fun_facts = [
    "ЁЯФН р╣Ар╕кр╕╡р╕вр╕Зр╕Вр╕нр╕З 'siren' р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Фр╕┤р╕Щр╕Чр╕▓р╕Зр╣Др╕Фр╣Йр╣Др╕Бр╕ер╕Вр╕╢р╣Йр╕Щр╣Гр╕Щр╕нр╕▓р╕Бр╕▓р╕ир╣Ар╕вр╣Зр╕Щ!",
    "ЁЯО╢ р╕Др╕ер╕╖р╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕Фр╕┤р╕Щр╕Чр╕▓р╕Зр╣Ар╕гр╣Зр╕зр╕Вр╕╢р╣Йр╕Щр╣Гр╕Щр╕Щр╣Йр╕│р╕бр╕▓р╕Бр╕Бр╕зр╣Ир╕▓р╣Гр╕Щр╕нр╕▓р╕Бр╕▓р╕ир╕Цр╕╢р╕З 4 р╣Ар╕Чр╣Ир╕▓!",
    "ЁЯУв р╕лр╕╣р╕бр╕Щр╕╕р╕йр╕вр╣Мр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Др╕Фр╣Йр╕вр╕┤р╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕бр╕╡р╕Др╕зр╕▓р╕бр╕Цр╕╡р╣Ир╕Хр╕▒р╣Йр╕Зр╣Бр╕Хр╣И 20Hz р╕Цр╕╢р╕З 20,000Hz!",
    "ЁЯжЗ р╕Др╣Йр╕▓р╕Зр╕Др╕▓р╕зр╣Гр╕Кр╣Йр╕Др╕ер╕╖р╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕кр╕╣р╕Зр╣Ар╕Бр╕┤р╕Щр╕Бр╕зр╣Ир╕▓р╕Чр╕╡р╣Ир╕бр╕Щр╕╕р╕йр╕вр╣Мр╕Ир╕░р╣Др╕Фр╣Йр╕вр╕┤р╕Щ (Ultrasonic) р╣Ар╕Юр╕╖р╣Ир╕нр╕Щр╕│р╕Чр╕▓р╕З!",
    "ЁЯЪЧ р╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕вр╕Щр╕Хр╣Мр╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Кр╣Ир╕зр╕вр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕зр╕▓р╕бр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤р╕Вр╕нр╕Зр╕гр╕Цр╣Др╕Фр╣Й!",
]
st.success(random.choice(fun_facts))

# тЬЕ р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕гр╕Бр╣Ир╕нр╕Щр╕Чр╕╡р╣И AI р╕Ир╕░р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Ар╕кр╕╡р╕вр╕З (р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕кр╕╡р╣Гр╕лр╣Йр╕Фр╕╣р╕Щр╣Ир╕▓р╕кр╕Щр╣Гр╕Ир╕Вр╕╢р╣Йр╕Щ)
st.markdown(
    "<h2 style='color: #38bdf8;'>ЁЯФм р╕Бр╣Ир╕нр╕Щр╕Чр╕╡р╣И AI р╕Ир╕░р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Ар╕кр╕╡р╕вр╕З р╕Хр╣Йр╕нр╕Зр╕Ьр╣Ир╕▓р╕Щр╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕нр╕░р╣Др╕гр╕Ър╣Йр╕▓р╕З?</h2>",
    unsafe_allow_html=True,
)
st.markdown(
    """
<p style='color: white; font-size: 16px;'>
р╕Бр╣Ир╕нр╕Щр╕Чр╕╡р╣Ир╣Ар╕кр╕╡р╕вр╕Зр╕Ир╕░р╕Цр╕╣р╕Бр╕Щр╕│р╣Др╕Ыр╣Гр╕Кр╣Йр╣Гр╕Щ AI р╣Ар╕гр╕▓р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ыр╣Йр╕нр╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕Фр╕┤р╕Ър╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Др╕Фр╣Йр╣Вр╕Фр╕вр╕Хр╕гр╕З  
р╣Бр╕Хр╣Ир╕Хр╣Йр╕нр╕Зр╕Ьр╣Ир╕▓р╕Щр╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╣Гр╕лр╣Йр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Чр╕╡р╣И AI р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Др╕Фр╣Й р╕Фр╕▒р╕Зр╕Щр╕╡р╣Й:
</p>
""",
    unsafe_allow_html=True,
)

st.markdown(
    """
<ul style='color: white; font-size: 16px;'>
<li>ЁЯУВ <b>р╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З</b> тЖТ AI р╕Хр╣Йр╕нр╕Зр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З р╣Ар╕Кр╣Ир╕Щ <code>.wav</code></li>
<li>ЁЯОЫ <b>р╣Бр╕Ыр╕ер╕Зр╣Ар╕кр╕╡р╕вр╕Зр╣Гр╕лр╣Йр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕гр╕╣р╕Ыр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕ер╕В</b> тЖТ AI р╣Гр╕Кр╣Й <code>MFCC</code>, <code>Mel Spectrogram</code></li>
<li>ЁЯдЦ <b>р╕кр╣Ир╕Зр╣Ар╕Вр╣Йр╕▓р╣Вр╕бр╣Ар╕Фр╕е AI</b> тЖТ р╣Гр╕лр╣Йр╣Вр╕бр╣Ар╕Фр╕ер╕Юр╕вр╕▓р╕Бр╕гр╕Ур╣Мр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Вр╕нр╕Зр╣Ар╕кр╕╡р╕вр╕З</li>
<li>ЁЯУК <b>р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Фр╕╣</b> тЖТ р╣Вр╕бр╣Ар╕Фр╕ер╕Ър╕нр╕Бр╕зр╣Ир╕▓р╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕вр╕┤р╕Щр╣Ар╕Ыр╣Зр╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕нр╕░р╣Др╕г ЁЯОп</li>
</ul>
""",
    unsafe_allow_html=True,
)

st.markdown(
    "<p style='color:#38bdf8; font-size:20px;'>ЁЯУв р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З р╣Бр╕ер╣Йр╕зр╣Гр╕лр╣Йр╣Вр╕бр╣Ар╕Фр╕ер╕Чр╕▓р╕вр╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕нр╕░р╣Др╕г!</p>",
    unsafe_allow_html=True,
)

# тЬЕ р╣Вр╕лр╕ер╕Фр╣Вр╕бр╣Ар╕Фр╕е
model = tf.keras.models.load_model(
    "models/Model_sound_event.h5"
)  # тЬЕ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щ path р╣Гр╕лр╣Йр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
# scaler = StandardScaler()
scaler = joblib.load("models/scaler.pkl")  # тЬЕ р╣Вр╕лр╕ер╕Ф Scaler р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Хр╕нр╕Щр╣Ар╕Чр╕гр╕Щ

# тЬЕ Class Labels
class_labels = {
    0: "Air Conditioner",
    1: "Car Horn",
    2: "Children Playing",
    3: "Dog Bark",
    4: "Engine idling",
    5: "Jackhammer",
    6: "Siren",
}


# тЬЕ р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Фр╕╢р╕З MFCC р╣Бр╕ер╕░р╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щр╣Ар╕зр╕Бр╣Ар╕Хр╕нр╕гр╣М
def extract_mfcc(file, sr=22050, n_mfcc=40, min_n_fft=1024):
    y, sr = librosa.load(io.BytesIO(file.read()), sr=sr)
    if len(y) < min_n_fft:
        return None
    n_fft_value = min(2048, len(y))
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc, n_fft=n_fft_value)
    return mfcc.flatten()


# тЬЕ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З
st.warning("ЁЯУВ р╕Бр╕гр╕╕р╕Ур╕▓р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З (.wav) р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Гр╕лр╣Й AI р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М")
uploaded_file = st.file_uploader("", type=["wav"])

if uploaded_file is not None:
    st.audio(uploaded_file, format="audio/wav")
    st.write("тЬЕ **р╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕Др╕╕р╕Ур╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Ф:**", uploaded_file.name)

    mfcc_features = extract_mfcc(uploaded_file)
    if mfcc_features is not None:
        mfcc_features = mfcc_features.reshape(1, -1)

        target_features = 6960  # тЬЕ р╕Ир╕│р╕Щр╕зр╕Щр╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Чр╕╡р╣Ир╣Вр╕бр╣Ар╕Фр╕ер╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г
        if mfcc_features.shape[1] < target_features:
            pad_width = target_features - mfcc_features.shape[1]
            mfcc_features = np.pad(
                mfcc_features,
                ((0, 0), (0, pad_width)),
                mode="constant",
                constant_values=-100,
            )
        elif mfcc_features.shape[1] > target_features:
            mfcc_features = mfcc_features[:, :target_features]

        # тЬЕ р╣Гр╕Кр╣Й `scaler.transform()` р╕Чр╕╡р╣Ир╣Вр╕лр╕ер╕Фр╕бр╕▓р╣Бр╕Чр╕Щ fit_transform()
        print(mfcc_features)
        print("X_test р╕Бр╣Ир╕нр╕Щ Scaling:", mfcc_features[:5])

        mfcc_features = scaler.transform(mfcc_features)
        print("X_test р╕лр╕ер╕▒р╕З Scaling:", mfcc_features[:5])

        X_test = np.expand_dims(mfcc_features, axis=1)  # тЬЕ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щ (1, 1, 6960)

        # тЬЕ р╣Гр╕лр╣Йр╣Вр╕бр╣Ар╕Фр╕ер╕Юр╕вр╕▓р╕Бр╕гр╕Ур╣М
        prediction = model.predict(X_test)
        print(prediction)
        predicted_class = np.argmax(prediction)
        predicted_label = class_labels[predicted_class]

    if st.button("ЁЯФН р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Ар╕кр╕╡р╕вр╕З"):
        st.success(f"тЬЕ р╕Бр╕▓р╕гр╕Юр╕вр╕▓р╕Бр╕гр╕Ур╣Мр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ! р╣Ар╕кр╕╡р╕вр╕Зр╕Щр╕╡р╣Йр╕Др╕╖р╕н **{predicted_label}**")
        st.balloons()
